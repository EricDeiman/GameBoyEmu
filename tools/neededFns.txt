 void ADC( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void ADD( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void AND( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void BIT( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void CALL( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void CCF( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void CP( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void CPL( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void DAA( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void DBG( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void DEC( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void DI( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void EI( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void HALT( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void ILL( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void INC( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void JP( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void JR( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void LD( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void LDH( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void NOP( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void OR( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void POP( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void PREFIX( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void PUSH( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void RES( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void RET( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void RETI( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void RL( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void RLA( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void RLC( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void RLCA( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void RR( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void RRA( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void RRC( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void RRCA( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void RST( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void SBC( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void SCF( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void SET( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void SLA( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void SRA( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void SRL( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void STOP( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void SUB( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void SWAP( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
 void XOR( const InstDetails&, u8, u8 ) { throw std::runtime_error( "not implemented" ); }
